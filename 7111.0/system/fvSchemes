// -*- C++ -*-
// File generated by PyFoam - sorry for the ugliness

FoamFile
{
 version 2.0;
 format ascii;
 class dictionary;
 location "system";
 object fvSchemes;
}

ddtSchemes
{
  default backward;
}

gradSchemes
{
  default Gauss linear ;
  grad(p) cellMDLimited Gauss linear 0.5;
  grad(U) cellMDLimited Gauss linear 0.5;
  grad(nuTilda) cellMDLimited Gauss linear 0.5;
  grad(k) cellMDLimited Gauss linear 0.5;
  grad(omega) cellMDLimited Gauss linear 0.5;
  grad(epsilon) cellMDLimited Gauss linear 0.5;
  grad(yPsi) cellLimited Gauss linear       1.0 ;
}

divSchemes
{
  default none;
  div(phi,U) bounded Gauss linearUpwind grad(U);
  div(phi,nuTilda) bounded Gauss upwind;
  div(phi,k) bounded Gauss upwind;
  div(phi,epsilon) bounded Gauss upwind;
  div(phi,omega) bounded Gauss upwind;
  div((nuEff*dev(T(grad(U))))) Gauss linear ;
  div((nuEff*dev2(T(grad(U))))) Gauss linear ;
}

laplacianSchemes
{
  default Gauss linear limited corrected       0.5 ;
  laplacian(diffusivity,cellDisplacement) Gauss linear corrected ;
  laplacian(yPsi) Gauss linear corrected ;
}

interpolationSchemes
{
  default linear;
}

snGradSchemes
{
  default corrected;
}

fluxRequired
{
  default no;
  pcorr /* empty */ ;
  p /* empty */ ;
  yPsi /* empty */ ;
}

oversetInterpolation
{
  method inverseDistance;
} 	//trackingInverseDistance;// The inverseDistance method uses a 'voxel' like search structure.// Optionally specify the extent and number of divisions n.// Note that it will allocate an array of nx*ny*nz. If not specified:// - searchBox          : local mesh bounding box// - searchBoxDivisions : root (2D) or cube-root(3D) of number of cells//searchBox           (-0.1 -0.5 0)(1.1 0.5 1);//searchBoxDivisions  (100 100 1);//oversetInterpolationRequired//{//    epsilon;//    omega;//    k;//    nut;//}

wallDist
{
  method Poisson;
} 	//meshWave;// ************************************************************************* //

