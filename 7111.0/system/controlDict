// -*- C++ -*-
// File generated by PyFoam - sorry for the ugliness

FoamFile
{
 version 2.0;
 format ascii;
 class dictionary;
 location "system";
 object controlDict;
}

libs
  (
    "liboverset.so"
  );

DebugSwitches
{
  overset 0;
  dynamicOversetFvMesh 0; 	//0 off - 1 give more information
  cellVolumeWeight 0;
  inverseDistance 0; 	//2 Force dumping of cellInterpolationWeight
}

application pimpleDyMFoam;

startFrom startTime;

startTime 0;

stopAt endTime;

endTime 2.617993877991494;

deltaT 0.0001;

writeControl adjustableRunTime; 	//timeStep;

writeInterval 0.2617993877991494;

purgeWrite 0;

writeFormat ascii;

writePrecision 12;

writeCompression no;
timeFormat general;

timePrecision 6;

runTimeModifiable yes;
adjustTimeStep yes;
maxCo 30.0;

minDeltaT 1e-06;

functions
{
  forces_foil
  {
    type forces;
    libs
      (
        "libforces.so"
      );
    writeControl timeStep;
    writeInterval 1;
    patches
      (
        foil
      );
    pName p;
    UName U;
    rho rhoInf;
    log yes;
    rhoInf 1.2041;
    CofR (0 0 0.5);
  }
  forceCoeffs_object
  {
    type forceCoeffs;
    libs
      (
        "libforces.so"
      ); 	// rhoInf - reference density// CofR - Centre of rotation// dragDir - Direction of drag coefficient// liftDir - Direction of lift coefficient// pitchAxis - Pitching moment axis// magUinf - free stream velocity magnitude// lRef - reference length// Aref - reference area
    patches
      (
        foil
      );
    pName p;
    Uname U;
    rho rhoInf;
    rhoInf 1.2041; 	//// Dump to file
    log yes;
    CofR (0 0 0.5);
    liftDir (-0.139173 0.990268 0); 	// ok for 8deg only : case 7x
    dragDir (0.990268 0.139173 0);
    pitchAxis (0 0 1);
    magUInf 60.0;
    lRef 1; 	// reference lenght for moments!!!
    Aref 1; 	//2.0;         // reference area 1 for 2d
    writeControl timeStep;
    writeInterval 1;
  }
  sysCall
  {
    type systemCall;
    libs
      (
        "libutilityFunctionObjects.so"
      ); 	//executeCalls 0();
    executeCalls
      (
        "./testStep.sh"
      ); 	//MODERATE CPU USAGE//executeCalls 1("python testStep.py");//CRAZY CPU USAGE
    endCalls
      (
      );
    writeCalls
      (
        "python3 conv_test.py"
      );
    writeControl outputTime;
  }
} 	// ************************************************************************* //

